{
    "INPUT": {
        "info": "The INPUT block takes user input before the flow is executed and passes it to its outgoing neighbors at the start of execution. All chains of execution start with either an INPUT block, or an FIXED-INPUT block.",
        "maps": {
            "none": "single"
        },
        "parameters": {},
        "hidden": false
    },
    "FIXED-INPUT": {
        "info": "The FIXED-INPUT block takes a text input as a parameter when it is created. When execution is started it passes the input to its outgoing neighbors.",
        "maps": {
            "none": "single"
        },
        "parameters": {
            "FIXED-INPUT-text": {
                "label": "Fixed Text Input",
                "type": "textbox",
                "final": false
            }
        },
        "hidden": false
    },
    "OUTPUT": {
        "info": "The OUTPUT block forwards any text passed to it to its corresponding text box in the Output section of the sidebar.",
        "maps": {
            "none": "none",
            "single": "none"
        },
        "parameters": {},
        "hidden": false
    },
    "FORWARD": {
        "info": "The FORWARD block just forwards input to all of its outputs. Useful for creating delays or cycles.",
        "maps": {
            "none": "none",
            "single": "single",
            "multi": "multi"
        },
        "parameters": {},
        "hidden": false
    },
    "SAVE": {
        "info": "The SAVE block saves the first input it receives and forwards it. Every time it is activated after that it outputs the saved first input.",
        "maps": {
            "none": "none",
            "single": "single",
            "multi": "multi"
        },
        "parameters": {},
        "hidden": false
    },
    "SPLIT": {
        "info": "The SPLIT block splits its input into overlapping chunks, where the chunk size and overlap is set when the block is created. It attempts to break the chunks on newlines, periods, commas, or spaces, in that order. The chunk deviation parameter controls how far it searchs for those break elements. The block outputs these chunks as an array.",
        "maps": {
            "none": "none",
            "single": "multi"
        },
        "parameters": {
            "SPLIT-chunk-size": {
                "label": "Chunk Size (Characters)",
                "type": "num",
                "min": "500",
                "max": "10000",
                "default": "2000",
                "final": false
            },
            "SPLIT-chunk-overlap": {
                "label": "Chunk Overlap (Characters)",
                "type": "num",
                "min": "0",
                "max": "500",
                "default": "0",
                "final": false
            },
            "SPLIT-chunk-deviation": {
                "label": "Chunk Deviation (Characters)",
                "type": "num",
                "min": "0",
                "max": "200",
                "default": "50",
                "final": false
            }
        },
        "hidden": false
    },
    "SEPARATE": {
        "info": "The SEPARATE block is a special compound block. It is used for turning arrays into text by array index. It takes as a parameter n, the number of outputs it should have, and takes an array as input; then, entry i of the array is sent to the output node in the block labeled i, for each i from 1 to n.",
        "maps": {
            "none": "unavailable"
        },
        "parameters": {
            "SEPARATE-num-outputs": {
                "label": "Number of Outputs",
                "type": "num",
                "min": "1",
                "max": "10",
                "default": "5",
                "final": true
            }
        },
        "hidden": false
    },
    "SEPARATE-INPUT": {
        "maps": {
            "none": "unavailable",
            "multi": "unavailable"
        },
        "parameters": {},
        "hidden": true
    },
    "SEPARATE-OUTPUT": {
        "maps": {
            "unavailable": "single"
        },
        "parameters": {},
        "hidden": true
    },
    "EMIT": {
        "info": "The EMIT block takes an array as input and outputs each item in it in order. Thus every outgoing neighbor of the EMIT block will be activated with the items of the array queued as separate inputs.",
        "maps": {
            "none": "none",
            "multi": "single"
        },
        "parameters": {},
        "hidden": false
    },
    "LLM": {
        "info": "The LLM block calls a Large Language Model according to your API settings and its parameters in order to answer a query. The block has a fixed query, set when it is created; however, if the fixed query contains the string '_INPUT_', then that string is substituted for the input to the block. This acts similarly to a one-input SYNTHESIZE block. The model's response to the constructed query is the output.",
        "maps": {
            "none": "none",
            "single": "single"
        },
        "parameters": {
            "LLM-query": {
                "label": "Query for LLM",
                "type": "textbox",
                "final": false
            },
            "LLM-temperature": {
                "label": "Temperature",
                "type": "num",
                "min": "0.00",
                "max": "2.00",
                "step": "0.01",
                "default": "0.70",
                "final": false
            },
            "LLM-max-new-tokens": {
                "label": "Max New Tokens",
                "type": "num",
                "min": "1",
                "max": "32768",
                "default": 1024,
                "final": false
            },"LLM-max-prompt-tokens": {
                "label": "Max Prompt Tokens",
                "type": "num",
                "min": "1024",
                "max": "65536",
                "step": "1024",
                "default": "2048",
                "final": false
            }
        },
        "hidden": false
    },
    "SYNTHESIZE": {
        "info": "The SYNTHESIZE block is a special compound block. It takes an output format as a paramter, which is a string. It consists of n numbered inputs all pointing to one output, where n is a parameter set when the block is created; this output will wait for all of its inputs to come in before executing, entering a yellow waiting state when it has received some inputs but not all. Once all inputs are in, the block will output the result of replacing all instances of the string '_INPUTi_' in the output format parameter with the input from the sub-block labeled input i, for each i from 1 to n. As an example, if n=2 and the output format is '_INPUT1_ (hi!) _INPUT2_', and the inputs are 'Hello' and 'World!', the output will be 'Hello (hi!) World!'.",
        "maps": {
            "none": "unavailable"
        },
        "parameters": {
            "SYNTHESIZE-num-inputs": {
                "label": "Number of Inputs",
                "type": "num",
                "min": "1",
                "max": "10",
                "default": "2",
                "final": true
            },
            "SYNTHESIZE-output-format": {
                "label": "Output Format",
                "type": "textbox",
                "final": false
            }
        },
        "hidden": false
    },
    "SYNTHESIZE-INPUT": {
        "maps": {
            "none": "unavailable",
            "single": "unavailable"
        },
        "parameters": {},
        "hidden": true
    },
    "SYNTHESIZE-OUTPUT": {
        "maps": {
            "unavailable": "single"
        },
        "parameters": {},
        "hidden": true
    },
    "REGEX": {
        "info": "The REGEX block takes as a parameter a regular expression. Upon execution, it matches this regular expression against its input, and outputs an array of matches.",
        "maps": {
            "none": "none",
            "single": "multi"
        },
        "parameters": {
            "REGEX-regex": {
                "label": "Regular Expression",
                "type": "text",
                "final": false
            }
        },
        "hidden": false
    },
    "REGEX-CAPTURE": {
        "info": "The REGEX-CAPTURE block is a special compound block. It takes a parameter a regular expression that has at least one capture group. It consists of one input block and an output block for each capture group. Upon execution, each output block will return an array, corresponding to that block's capture group for each match.",
        "maps": {
            "none": "unavailable"
        },
        "parameters": {
            "REGEX-CAPTURE-regex" : {
                "label": "Regular Expression",
                "type": "text",
                "final": true
            }
        },
        "hidden": false
    },
    "REGEX-CAPTURE-INPUT": {
        "maps": {
            "none": "unavailable",
            "single": "unavailable"
        },
        "parameters": {},
        "hidden": true
    },
    "REGEX-CAPTURE-OUTPUT": {
        "maps": {
            "unavailable": "multi"
        },
        "parameters": {},
        "hidden": true
    },
    "GET" : {
        "info": "The GET block is a special compound block. It takes no parameters. It consists of an input block for a URL, and two outputs: One that gives the text extracted from the website at that URL along with link references starting at 1, and one that outputs an array of links to other URLs found in the webpage. The link references in the output text extracted correspond to the indices of the URLs in the output link array, starting with 1.",
        "maps": {
            "none": "unavailable"
        },
        "parameters": {},
        "hidden": false
    },
    "GET-INPUT" : {
        "maps": {
            "none": "unavailable",
            "single": "unavailable"
        },
        "parameters": {},
        "hidden": true
    },
    "GET-TEXT-OUTPUT" : {
        "maps": {
            "unavailable": "single"
        },
        "parameters": {},
        "hidden": true
    },
    "GET-URL-OUTPUT" : {
        "maps": {
            "unavailable": "multi"
        },
        "parameters": {},
        "hidden": true
    },
    "SCRIPT" : {
        "info" : "The SCRIPT block is a special compound block. It allows you to write your own javascript to edit the text mid-flow. It takes several parameters: the number of Text Inputs, the number of Array Inputs, the type of the output, and the Javascript for the block. The Javascript will be executed once all inputs have arrived, and pass on the returned value to the output. When writing your Javascript, the text inputs will be available to you in an array named textInputs, and the array inputs will be available in an array named arrayInputs. Thus textInputs will be an array of strings corresponding to the text inputs, and arrayInputs will be an array of arrays of strings corresponding to the array inputs. For example, to access the first text input in your Javascript, you would write textInputs[0]. You can return either a single string or an array of strings.",
        "maps": {
            "none": "unavailable"
        },
        "parameters": {
            "SCRIPT-num-text-inputs": {
                "label": "Number of Text Inputs",
                "type": "num",
                "min": "0",
                "max": "10",
                "default": "1",
                "final": true
            },
            "SCRIPT-num-array-inputs": {
                "label": "Number of Array Inputs",
                "type": "num",
                "min": "0",
                "max": "10",
                "default": "0",
                "final": true
            },
            "SCRIPT-output-type" : {
                "label" : "Output Type",
                "type": "choice",
                "choices": ["Text", "Array of Text"],
                "final": true
            },
            "SCRIPT-code" : {
                "label": "Javascript",
                "type": "textbox",
                "final": true
            }
        },
        "hidden": false
    },
    "SCRIPT-TEXT-INPUT" : {
        "maps": {
            "none": "unavailable",
            "single": "unavailable"
        },
        "parameters": {},
        "hidden": true
    },
    "SCRIPT-ARRAY-INPUT" : {
        "maps": {
            "none": "unavailable",
            "multi": "unavailable"
        },
        "parameters": {},
        "hidden": true
    },
    "SCRIPT-TEXT-OUTPUT" : {
        "maps": {
            "unavailable": "single"
        },
        "parameters": {},
        "hidden": true
    },
    "SCRIPT-ARRAY-OUTPUT" : {
        "maps": {
            "unavailable": "multi"
        },
        "parameters": {},
        "hidden": true
    }
}